import textwrap
from enum import Enum

import pytest

from telebot_components.form.field import (
    FormFieldResultProcessingOpts,
    NextFieldGetter,
    PlainTextField,
    SingleSelectField,
)
from telebot_components.form.form import Form

DUMMY_FORM_FIELD_KW = {"required": True, "query_message": "aaa", "empty_text_error_msg": "fail :("}


@pytest.mark.parametrize(
    "fields, expected_globally_required, expected_result_type",
    [
        pytest.param(
            [
                PlainTextField(name="a", **DUMMY_FORM_FIELD_KW),  # type: ignore
                PlainTextField(name="b", **DUMMY_FORM_FIELD_KW),  # type: ignore
                PlainTextField(name="c", **DUMMY_FORM_FIELD_KW),  # type: ignore
            ],
            {"a", "b", "c"},
            '''
            class MyFormResultT(TypedDict):
                """Generated by Form.generate_result_type() method"""
                a: str
                b: str
                c: str
            ''',
            id="basic linear form",
        ),
        pytest.param(
            [
                PlainTextField(name="a", **DUMMY_FORM_FIELD_KW),  # type: ignore
                PlainTextField(
                    name="b",
                    next_field_getter=NextFieldGetter.by_mapping({"one": "c1", "two": "c2"}, default="c3"),
                    **DUMMY_FORM_FIELD_KW,  # type: ignore
                ),
                PlainTextField(name="c1", next_field_getter=NextFieldGetter.by_name("d"), **DUMMY_FORM_FIELD_KW),  # type: ignore
                PlainTextField(name="c2", next_field_getter=NextFieldGetter.by_name("c4"), **DUMMY_FORM_FIELD_KW),  # type: ignore
                PlainTextField(name="c4", next_field_getter=NextFieldGetter.by_name("c5"), **DUMMY_FORM_FIELD_KW),  # type: ignore
                PlainTextField(name="c5", next_field_getter=NextFieldGetter.by_name("d"), **DUMMY_FORM_FIELD_KW),  # type: ignore
                PlainTextField(name="c3", next_field_getter=NextFieldGetter.by_name("d"), **DUMMY_FORM_FIELD_KW),  # type: ignore
                PlainTextField(name="d", **DUMMY_FORM_FIELD_KW),  # type: ignore
                PlainTextField(name="e", **DUMMY_FORM_FIELD_KW),  # type: ignore
            ],
            {"a", "b", "d", "e"},
            '''
            class MyFormResultT(TypedDict):
                """Generated by Form.generate_result_type() method"""
                a: str
                b: str
                c1: NotRequired[str]
                c2: NotRequired[str]
                c3: NotRequired[str]
                c4: NotRequired[str]
                c5: NotRequired[str]
                d: str
                e: str
            ''',
            id="basic linear form",
        ),
    ],
)
def test_form_graph_analysis(
    fields: list[PlainTextField],
    expected_globally_required: set[str],
    expected_result_type: str,
) -> None:
    f = Form(fields=fields)
    assert f.globally_required_fields is not None
    assert f.globally_required_fields == expected_globally_required

    print(f.generate_result_type())
    print(f.format_graph())

    assert_equal_multiline_text(f.generate_result_type(), expected_result_type)


def test_form_result_processing() -> None:
    class GDPRConsent(Enum):
        YES = "yes"
        NO = "no"
        MAYBE = "maybe"

    form = Form(
        [
            PlainTextField(
                "message",
                result_processing_opts=FormFieldResultProcessingOpts(descr="message", column="m"),
                **DUMMY_FORM_FIELD_KW,  # type: ignore
            ),
            PlainTextField(
                "name",
                result_processing_opts=FormFieldResultProcessingOpts(descr="name", column="n"),
                **DUMMY_FORM_FIELD_KW,  # type: ignore
            ),
            SingleSelectField(
                "gdrp",
                result_processing_opts=FormFieldResultProcessingOpts(descr="gdrp_ok", column="gdrp"),
                required=True,
                query_message="?",
                EnumClass=GDPRConsent,
                invalid_enum_value_error_msg="",
            ),
            PlainTextField(
                "long_description",
                result_processing_opts=FormFieldResultProcessingOpts(descr="long", column="l", is_multiline=True),
                **DUMMY_FORM_FIELD_KW,  # type: ignore
            ),
        ]
    )

    telegram_msg_html = form.result_to_telegram_message(
        {
            "message": "Hello world",
            "name": "Igor",
            "gdrp": GDPRConsent.MAYBE,
            "long_description": "Lorem ipsum yada yada yada",
        }
    )
    expected_msg = """
        <b>message</b>: Hello world
        <b>name</b>: Igor
        <b>gdrp_ok</b>: maybe
        <b>long</b>
        Lorem ipsum yada yada yada
    """
    assert_equal_multiline_text(telegram_msg_html, expected_msg)


def assert_equal_multiline_text(t1: str, t2: str) -> None:
    def preproc(s: str) -> str:
        s = "\n".join(line for line in s.splitlines() if line)
        s = textwrap.dedent(s)
        s = s.strip()
        return s

    assert preproc(t1) == preproc(t2)
